# For the ZNP Robin Nano DW v2.2 board:
#   - Compile with the processor model STM32F401.
#   - Select the 32KiB bootloader,
#   - Select (Serial (on # USART1 PA10/PA9) for the communication interface.
#   - Select (Serial (on # USART2 PA3/PA2) if you want to use the serial UART pins on J17 (wifi section)
# Note that the "make flash" command does not work with ZNP Robin boards. After running "make", run the following command:
# cp out/klipper.bin out/ZNP_ROBIN_NANO.bin
#
# Copy the file out/ZNP_ROBIN_NANO.bin to an SD card and then restart the printer with that SD card.
# See docs/Config_Reference.md for a description of parameters.

#[include timelapse.cfg]

[exclude_object]
# must be disabled for Sonic Pad

[virtual_sdcard]
path: /home/biqu/ElegooNeptune3Plus_data/gcodes

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
#[include /macros/gcode_macro_CANCEL_PRINT.cfg]


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 
    
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

[mcu]
serial: /dev/serial/by-path/platform-5200000.usb-usb-0:1.2:1.0-port0
restart_method: command

# ADXL setup https://bttwiki.com/PAD7.html#system-settings
[mcu CB1]
serial: /tmp/klipper_host_mcu

#inpunt shaping
#[adxl345]
#cs_pin: CB1:None
#spi_bus: spidev1.1
#axes_map: z,y,-x  # Modify according to the actual orientation of the ADXL345 installed on the printer.



[led LED_Light]
white_pin: PB9
initial_white: 1.0

#[output_pin LED_Light] #toggle for LED Light - use this instead of [LED] for sonic pad
#Pin: PB9
#cycle_time: 0.01
#pwm: true
#value: 1

[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 3000
max_z_velocity: 15
max_z_accel: 100
square_corner_velocity: 5
# Use those higher values just to configure Input Shaper 
#max_accel: 10000
#max_accel_to_decel: 10000

#rotation_distance = <full_steps_per_rotation> * <microsteps> / <steps_per_mm>

[stepper_x]
step_pin: !PC12
dir_pin: PB3
enable_pin: !PD2
microsteps: 16
rotation_distance: 40.199
endstop_pin: PA13
position_endstop: -8
position_min: -8.3
position_max: 330
homing_speed: 50

[stepper_y]
step_pin: PC11
dir_pin: PA15
enable_pin: !PC10
microsteps: 16
rotation_distance: 40.346
endstop_pin: PB8
position_endstop: 0
position_min: -1.3
position_max: 330
homing_speed: 50

[stepper_z]
step_pin: PC7
dir_pin: !PC9
enable_pin: !PC8
rotation_distance: 8
microsteps: 16
position_min: -5 # this was set so I could set a negative offset and get my nizzle close enough to the bed
position_max: 410
endstop_pin: probe:z_virtual_endstop # Use Z- as endstop
homing_speed: 5.0


[extruder]
max_extrude_only_distance: 100.0
step_pin: PB10
dir_pin: PB1
enable_pin: !PC6
microsteps: 16
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA6
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
min_temp: 0
max_temp: 250
# Calibrate E-Steps https://www.klipper3d.org/Rotation_Distance.html#calibrating-rotation_distance-on-extruders
rotation_distance: 7.595
# Calibrate PID: https://www.klipper3d.org/Config_checks.html#calibrate-pid-settings
#  - Example: PID_CALIBRATE HEATER=extruder TARGET=200
#control = pid
#pid_kp = 30.356
#pid_ki = 1.857
#pid_kd = 124.081
# Calibrate PA: https://www.klipper3d.org/Pressure_Advance.html
pressure_advance = 0.120

[heater_bed]
heater_pin: PA5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
pwm_cycle_time: 0.020 # set to 0.0166 if your grid runs on 60Hz to fix lights flickering
max_temp: 110
min_temp: 0
# Calibrate PID: https://www.klipper3d.org/Config_checks.html#calibrate-pid-settings
#  - Example: PID_CALIBRATE HEATER=heater_bed TARGET=60
#control = pid
#pid_kp = 64.230
#pid_ki = 0.723
#pid_kd = 1425.905

[heater_fan hotend_fan]
pin: PB0
heater: extruder
heater_temp: 50.0

[fan]
pin: PA7

[force_move]
enable_force_move: True

[safe_z_home]
home_xy_position: 160, 160
z_hop: 5

[probe]
pin: ^PA8
speed: 5
lift_speed: 15
samples: 3
x_offset: -28.5
y_offset: 22
# Calibrate probe: https://www.klipper3d.org/Bed_Level.html
# - Example: PROBE_CALIBRATE, then adjust with TESTZ Z=+/-X
#z_offset = 0

[filament_switch_sensor filament_sensor]
pause_on_runout: true
switch_pin: PB4

[bed_mesh]
speed: 200
horizontal_move_z: 5
mesh_min: 22,22
mesh_max: 290,315
probe_count: 7,7
fade_start: 1.0
fade_end: 10.0
algorithm: bicubic

[screws_tilt_adjust]
screw1: 66, 10.5
screw1_name: left front screw
screw2: 66, 143
screw2_name: left middle screw
screw3: 66, 270.5
screw3_name: left back screw
screw4: 321, 10.5
screw4_name: right front screw
screw5: 321, 143
screw5_name: right middle screw
screw6: 321, 270.5
screw6_name: right back screw

[input_shaper]
# Calibrate IS: https://www.klipper3d.org/Resonance_Compensation.html
#shaper_type_y = mzv
#shaper_freq_y = 38.2
#shaper_type_x = ei
#shaper_freq_x = 79.6

#input shaping
#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    160, 160, 20  # an example

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
#min_temp: 10
#max_temp: 105

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
sensor_temperature1: 25
sensor_adc1: 0.210317
#min_temp: 0
#max_temp: 105

[gcode_macro M420]
description: Load the current mesh
gcode:
  BED_MESH_PROFILE LOAD=default
  
[gcode_macro G29]
description: creates automated homing and bed mesh
gcode:
  G28
  BED_MESH_CALIBRATE
  DATA_SAVE

[gcode_macro M600]
########### Gcode ############
gcode:
  {% set default_x = printer.toolhead.axis_minimum.x + 20 %}
  {% set default_y = printer.toolhead.axis_minimum.y + 20 %}
  {% set default_e = 100 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'park_x' in svv %}
      {% set default_x = svv.park_x %}
    {% endif %}
    {% if 'park_y' in svv %}
      {% set default_y = svv.park_y %}
    {% endif %}
    {% if 'bowden_len' in svv %}
      {% set default_e = svv.bowden_len %}
    {% endif %}
  {% endif %}

  {% set x = params.X|default(default_x)|float %}
  {% set y = params.Y|default(default_y)|float %}
  {% set z = params.Z|default(20)|float %}
  {% set e = params.E|default(default_e)|float %}

  {% if printer.pause_resume.is_paused %}
    {action_respond_info("Already paused")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    PAUSE_PARK X={x} Y={y} Z={z}
    M702 U{e}
  {% endif %}

[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

[gcode_macro BEEP_ATTENTION]
gcode:
	{% set V = 0.5 %}
	M300 S440 P200 V{V}
	G4 P200
	M300 S440 P200 V{V}
	G4 P200
	M300 S440 P200 V{V}
	G4 P200
	M300 S440 P200 V{V}
	G4 P200

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*# z_offset = 2.398
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 25.848
#*# pid_ki = 1.657
#*# pid_kd = 100.808
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 69.240
#*# pid_ki = 0.808
#*# pid_kd = 1482.608
#*#
#*# [input_shaper]
#*# shaper_type_y = ei
#*# shaper_freq_y = 39.0
#*# shaper_type_x = mzv
#*# shaper_freq_x = 83.8
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.290833, -0.190000, -0.118333, -0.078333, -0.095833, -0.145833, -0.219167
#*# 	  -0.303333, -0.184167, -0.084167, -0.028333, -0.042500, -0.095833, -0.189167
#*# 	  -0.291667, -0.144167, -0.039167, 0.031667, -0.009167, -0.070000, -0.210000
#*# 	  -0.274167, -0.150833, -0.035833, 0.021667, -0.003333, -0.077500, -0.215833
#*# 	  -0.240000, -0.139167, -0.057500, -0.014167, -0.040000, -0.085833, -0.191667
#*# 	  -0.204167, -0.150000, -0.087500, -0.124167, -0.126667, -0.156667, -0.186667
#*# 	  -0.250000, -0.220833, -0.168333, -0.156667, -0.127500, -0.103333, -0.105000
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 22.0
#*# max_x = 289.96
#*# min_y = 22.0
#*# max_y = 314.98
